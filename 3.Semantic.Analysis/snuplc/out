parsing 'arrays.mod'...
(Debug) Start check
[Scope::TypeCheck] Start: arrays 

[Scope::TypeCheck] 0 over 3
[Scope::TypeCheck] Start: p1 
[Assign::TypeCheck] Start
[Array::TypeCheck] Start
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::TypeCheck] Start
[Assign::TypeCheck] End
[Assign::TypeCheck] Start
[Array::TypeCheck] Start
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::TypeCheck] Start
[Assign::TypeCheck] End
[Assign::TypeCheck] Start
[Array::TypeCheck] Start
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::TypeCheck] Start
[Assign::TypeCheck] End
[Assign::TypeCheck] Start
[Array::TypeCheck] Start
[Array::TypeCheck] Start
[Array::TypeCheck] Start
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::TypeCheck] Start
[Array::TypeCheck] Start
[Array::TypeCheck] Start
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Assign::TypeCheck] End
[Assign::TypeCheck] Start
[Array::TypeCheck] Start
[Array::TypeCheck] Start
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Array::TypeCheck] Start
[Assign::TypeCheck] End
[Assign::TypeCheck] Start
[Assign::TypeCheck] End
[Assign::TypeCheck] Start
[Array::TypeCheck] Start
[Array::GetType] started
[Array::GetType] is array type
<bool>
[Array::TypeCheck] Start
[Assign::TypeCheck] End
[Assign::TypeCheck] Start
[Assign::TypeCheck] End
[Scope::TypeCheck] End: p1

[Scope::TypeCheck] 1 over 3
[Scope::TypeCheck] Start: p2 
[Call::TypeCheck] Start
[Call::TypeCheck] End
[Call::TypeCheck] Start
[Call::TypeCheck] End
[Call::TypeCheck] Start
[Call::TypeCheck] End
[Assign::TypeCheck] Start
[Array::TypeCheck] Start
[Array::GetType] started
[Array::GetType] is pointer type
<int>
[Assign::TypeCheck] End
[Scope::TypeCheck] End: p2

[Scope::TypeCheck] 2 over 3
[Scope::TypeCheck] Start: strcpy 
[Return::TypeCheck] Start
[Return::TypeCheck] End
[Scope::TypeCheck] End: strcpy
[Scope::TypeCheck] End: arrays
(Debug) End check
successfully parsed.
  AST:
    CAstScope: 'arrays'
      symbol table:
        [[
          [ @A        <array 10  of <int>>           ]
          [ @B        <array 10  of <array 5  of <array 10  of <int>>>>           ]
          [ @D        <array 5  of <bool>>           ]
          [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>           ]
          [ *DOFS(<ptr(4) to <NULL>>) --> <int>           ]
          [ *ReadInt() --> <int>           ]
          [ *WriteChar(<char>) --> <NULL>           ]
          [ *WriteInt(<int>) --> <NULL>           ]
          [ *WriteLn() --> <NULL>           ]
          [ *WriteStr(<ptr(4) to <array  of <char>>>) --> <NULL>           ]
          [ *p1(<ptr(4) to <array  of <int>>>,<ptr(4) to <array  of <int>>>,<array  of <array  of <array  of <int>>>>) --> <NULL>           ]
          [ *p2(<ptr(4) to <array  of <array 5  of <array  of <int>>>>>) --> <NULL>           ]
          [ *strcpy(<ptr(4) to <array  of <char>>>,<ptr(4) to <array  of <char>>>) --> <int>           ]
        ]]
      statement list:
        empty.
      nested scopes:
        CAstScope: 'p1'
          symbol table:
            [[
              [ %A        <ptr(4) to <array  of <int>>>               ]
              [ %B        <ptr(4) to <array  of <int>>>               ]
              [ %C        <array  of <array  of <array  of <int>>>>               ]
              [ $X        <array 5  of <int>>               ]
              [ $Y        <array 5  of <int>>               ]
              [ $b        <bool>               ]
              [ $c        <char>               ]
              [ $i        <int>               ]
            ]]
          statement list:
            := <int>
              [ $i        <int> ] <int>
              [ %A        <ptr(4) to <array  of <int>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                0 <int>
            := <int>
              [ $i        <int> ] <int>
              [ %A        <ptr(4) to <array  of <int>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                -1 <int>
            := <int>
              [ $i        <int> ] <int>
              [ %A        <ptr(4) to <array  of <int>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                [ $i        <int> ] <int>
            := <int>
              [ $i        <int> ] <int>
              [ %A        <ptr(4) to <array  of <int>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                [ %A        <ptr(4) to <array  of <int>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                  [ %A        <ptr(4) to <array  of <int>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                    [ $i        <int> ] <int>
            := [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
              [ %A        <ptr(4) to <array  of <int>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                0 <int>
              [ %A        <ptr(4) to <array  of <int>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                0 <int>
            := <ptr(4) to <array  of <int>>>
              [ %A        <ptr(4) to <array  of <int>>> ] <ptr(4) to <array  of <int>>>
              [ %B        <ptr(4) to <array  of <int>>> ] <ptr(4) to <array  of <int>>>
            := <bool>
              [ $b        <bool> ] <bool>
              [ @D        <array 5  of <bool>> ] [Array::GetType] started
[Array::GetType] is array type
<bool>
<bool>
                0 <int>
            := <int>
              [ $i        <int> ] <int>
              0 <int>
          nested scopes:
            empty.
        
        CAstScope: 'p2'
          symbol table:
            [[
              [ %a        <ptr(4) to <array  of <array 5  of <array  of <int>>>>>               ]
              [ $b        <array 5  of <array 5  of <array 5  of <int>>>>               ]
              [ $c        <array 5  of <array 7  of <array 9  of <int>>>>               ]
            ]]
          statement list:
            call [ *p2(<ptr(4) to <array  of <array 5  of <array  of <int>>>>>) --> <NULL> ] <NULL>
              [ %a        <ptr(4) to <array  of <array 5  of <array  of <int>>>>> ] <ptr(4) to <array  of <array 5  of <array  of <int>>>>>
            call [ *p2(<ptr(4) to <array  of <array 5  of <array  of <int>>>>>) --> <NULL> ] <NULL>
              &() <ptr(4) to <array  of <array 5  of <array  of <int>>>>>
                [ @B        <array 10  of <array 5  of <array 10  of <int>>>> ] <array 10  of <array 5  of <array 10  of <int>>>>
            call [ *p2(<ptr(4) to <array  of <array 5  of <array  of <int>>>>>) --> <NULL> ] <NULL>
              &() <ptr(4) to <array  of <array 5  of <array  of <int>>>>>
                [ $b        <array 5  of <array 5  of <array 5  of <int>>>> ] <array 5  of <array 5  of <array 5  of <int>>>>
            := [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
              [ %a        <ptr(4) to <array  of <array 5  of <array  of <int>>>>> ] [Array::GetType] started
[Array::GetType] is pointer type
<int>
<int>
                0 <int>
                0 <int>
                0 <int>
              0 <int>
          nested scopes:
            empty.
        
        CAstScope: 'strcpy'
          symbol table:
            [[
              [ %dst      <ptr(4) to <array  of <char>>>               ]
              [ $res10    <array 10  of <char>>               ]
              [ $res5     <array 5  of <char>>               ]
              [ %src      <ptr(4) to <array  of <char>>>               ]
            ]]
          statement list:
            return <int>
              1 <int>
          nested scopes:
            empty.
        
    


run the following command to convert the .dot file into a PDF:
  dot -Tpdf -oarrays.mod.ast.pdf arrays.mod.ast.dot


Done.
